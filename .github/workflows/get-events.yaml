name: 🖐 Grab Events

on: 
    workflow_dispatch:

permissions: write-all

defaults:
    run:
        shell: bash

jobs:
    fetch-events:
        runs-on: ubuntu-latest
        if: ${{ github.event_name == 'workflow_dispatch' }}
        outputs:
            new_ones: ${{ steps.save-data.outputs.new_ones }}
            new_list: ${{ steps.save-data.outputs.new_list }}
        steps:
        -   name: Checkout
            uses: actions/checkout@v4
            with:
                submodules: recursive
                fetch-depth: 0
        -   name: Fetch Data
            id: fetch-data
            uses: jroehl/gsheet.action@release
            with:
                spreadsheetId: 1XEmNv7bX9_VxxqzD7XhWayRs9dv1ZAHyns2W2UyIAtk
                commands: |
                            [
                                { "command": "getData", "args": { "range": "'Form Responses 1'!A1:J99", "hasHeaderRow": true }}
                            ]
            env:
                GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
                GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}
        -   name: Save Data
            id: save-data
            env:
                RESULTS: ${{ steps.fetch-data.outputs.results }}
            run: |
                    git pull
                    data_file="data/events.json"
                    mkdir -p data
                    test -f $data_file || touch $data_file
                    existing=$(echo $(cat $data_file))
                    incoming=$(echo $RESULTS | jq)
                    incoming=$(echo $incoming | jq -r '.results[0].result.rawData' )
                    if [ -z "$existing" ]; then
                        allowed=$incoming
                        combined=$incoming
                    else
                        existslist=$(echo $existing | jq -c '[ .[] | .[0] ]')
                        allowed=$(echo $incoming | jq --argjson ex $existslist -r 'map(select(.[0] | . as $in | all($ex[]; . != $in)))')
                        combined=$(echo $existing $allowed | jq -s add)
                    fi
                    new_list=$(echo $allowed | jq -r 'map(.[0])')
                    echo 'new_list'=$new_list >> $GITHUB_OUTPUT
                    echo 'new_ones'=$allowed >> $GITHUB_OUTPUT
                    echo $combined > $data_file
        -   name: Commit Change
            id: commit-change
            run: |
                    git config --global user.name "GitHub Actions"
                    git config --global user.email "no-reply@github.com"
                    git tag updated-event-list
                    git add data/events.json
                    git commit -m "Updated event list"
                    git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
                    git push --follow-tags
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    build:
        uses: ./.github/workflows/hugo-build.yaml
        needs: fetch-events

    share:
        runs-on: ubuntu-latest
        needs: fetch-events
        if: ${{ needs.fetch-events.outputs.new_list != null }}
        strategy:
            matrix:
                steps: ${{ fromJSON(needs.fetch-events.outputs.new_list) }}
        steps:
            -   name: get new one
                id: get-new-one 
                run: |
                        new_one=$(echo '${{ needs.fetch-events.outputs.new_ones }}' | jq --arg step ${{ matrix.steps }} -r 'map(select(.[0] == $step))')
                        start=$(echo $new_one | jq -r '.[0][3]')
                        end=$(echo $new_one | jq -r '.[0][9]')
                        start_human=$(date --date="$start" --utc +"%A, %B %d, %Y %I:%M %p %Z")
                        end_human=$(date --date="$end" --utc +"%A, %B %d, %Y %I:%M %p")
                        echo start=$start >> $GITHUB_OUTPUT
                        echo end=$end >> $GITHUB_OUTPUT
                        echo start_human=$start_human >> $GITHUB_OUTPUT
                        echo end_human=$end_human >> $GITHUB_OUTPUT
                        echo new_one=$new_one >> $GITHUB_OUTPUT

                        embeds=$(echo $new_one | jq -r '.[0] | { "title": .[2], "timestamp": .[3], "description": ("When: " + "'"$start_human"'" + " - " + "'"$end_human"'" + "\nWhere: " + .[4] + "\n\n" + .[6]) }')
                        if [ ! -z $(echo $new_one | jq -r '.[0][7]') ]
                        then
                            embeds=$(echo $embeds | jq --arg value $(echo $new_one | jq -r '.[0][7]') '. + { "image": { "url": $value } }')
                        elif [ $(echo $new_one | jq -r '.[0][2]') == *DrinkUp* ]
                        then
                            embeds=$(echo $embeds | jq -r '. + { "image": { "url": "https://github.com/AxolStudio/STLGameDevSite/blob/main/assets/images/events/event-drinkup.png?raw=true" } }')
                        else
                            embeds=$(echo $embeds | jq -r '. + { "image": { "url": "https://github.com/AxolStudio/STLGameDevSite/blob/main/assets/images/events/event-generic.png?raw=true" } }')
                        fi
                        if [ ! -z $(echo $new_one | jq -r '.[0][5]') ]
                        then
                            embeds=$(echo $embeds | jq -r --arg value $(echo $new_one | jq -r '.[0][5]') '. + { "url": ("https://www.meetup.com/st-louis-game-developers/events/" + $value) }')
                        fi
                        embeds=$(echo $embeds | jq -c '[ . ]')
                        echo embeds=$embeds >> $GITHUB_OUTPUT
                        echo event_image=$(echo $embeds | jq -r '.[0].image.url') >> $GITHUB_OUTPUT
            -   name: STL Game Dev Discord
                uses: Ilshidur/action-discord@master
                env:
                    DISCORD_USERNAME: "STL Game Dev"
                    DISCORD_WEBHOOK: ${{ secrets.AXOL_WEBHOOK }}
                    DISCORD_EMBEDS: ${{ steps.get-new-one.outputs.embeds }}
                with:
                    args: ":calendar: A new event has been scheduled!"
            -   name: STL Game Dev Event
                run: |
                        event_name=$(echo $new_one | jq -r '.[0][2]')
                        event_location=$(echo $new_one | jq -r '.[0][4]')
                        event_description=$(echo $new_one | jq -r '.[0][6]')
                        
                        curl --location 'https://discord.com/api/v10/guilds/${{ secrets.AXOL_GUILD_ID }}/scheduled-events' \
                                --header 'Content-Type: application/json' \
                                --header 'Accept: application/json' \
                                --header 'Authorization: Bot ${{ secrets.DISCORD_API_TOKEN }}' \
                                --data '{
                                    "name": "'"$event_name"'",
                                    "scheduled_start_time": "${{ steps.get-new-one.outputs.start }}",
                                    "scheduled_end_time": "${{ steps.get-new-one.outputs.end }}",
                                    "privacy_level": {
                                        "title": "GUILD_ONLY",
                                        "description": "the scheduled event is only accessible to guild members",
                                        "const": 2
                                    },
                                    "entity_type": 3,
                                    "entity_metadata": {
                                        "location": "'"$event_location"'"
                                    },
                                    "description": "'"$event_description"'",
                                    "image": "'${{ steps.get-new-one.outputs.event_image }}'",
                                    "channel_id": "NULL"
                                }'